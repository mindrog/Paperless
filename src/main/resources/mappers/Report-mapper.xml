<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ss.paperless.report.ReportMapper">
    <resultMap id="ReportResultMap" type="com.ss.paperless.report.ReportDTO">

        <!-- Report 기본 필드 매핑 -->
        <id property="repo_no" column="repo_no"/>
        <result property="repo_emp_no" column="repo_emp_no"/>
        <result property="emp_code" column="emp_code"/>
        <result property="emp_name" column="emp_name"/>
        <result property="repo_title" column="repo_title"/>
        <result property="repo_content" column="repo_content"/>
        <result property="repo_status" column="repo_status"/>
        <result property="repo_code" column="repo_code"/>
        <result property="repo_date" column="repo_date"/>
        <result property="draft_date" column="draft_date"/>
        <result property="submission_date" column="submission_date"/>
        <result property="cancel_date" column="cancel_date"/>
        <result property="cancel_content" column="cancel_content"/>
        <result property="repo_type" column="repo_type"/>
        <result property="writer" column="writer"/>
        <result property="approvalType" column="approval_type"/>

        <!-- Work 관련 필드 매핑 -->
        <result property="work_repo_no" column="work_repo_no"/>
        <result property="repo_start_time" column="repo_start_time"/>
        <result property="repo_end_time" column="repo_end_time"/>

        <!-- Purchase 관련 필드 매핑 -->
        <result property="purch_repo_no" column="purch_repo_no"/>
        <result property="product_no" column="product_no"/>
        <result property="category" column="category"/>
        <result property="product_name" column="product_name"/>
        <result property="product_size" column="product_size"/>
        <result property="product_count" column="product_count"/>
        <result property="product_price" column="product_price"/>
        <result property="productPrices" column="product_prices"/>
        <result property="productEtc" column="product_etc"/>

        <!-- Attendance 관련 필드 매핑 -->
        <result property="atten_repo_no" column="atten_repo_no"/>
        <result property="vacation_type" column="vacation_type"/>
        <result property="atten_start_date" column="atten_start_date"/>
        <result property="atten_end_date" column="atten_end_date"/>

        <!-- Attachment 관련 필드 매핑 -->
        <result property="atta_no" column="atta_no"/>
        <result property="atta_key" column="atta_key"/>
        <result property="atta_url" column="atta_url"/>
        <result property="atta_original_name" column="atta_original_name"/>
        <result property="atta_size" column="atta_size"/>

        <!-- 결재자 목록 (ApproverDTO) 매핑 -->
        <collection property="approverInfo" ofType="com.ss.paperless.report.ApproverDTO">
            <id property="appr_no" column="appr_no"/>
            <result property="appr_repo_no" column="appr_repo_no"/>
            <result property="appr_emp_no" column="appr_emp_no"/>
            <result property="appr_order" column="appr_order"/>
            <result property="appr_status" column="appr_status"/>
            <result property="approval_type" column="approval_type"/>
            <result property="appr_delegate" column="appr_delegate"/>
            <result property="appr_is_read" column="appr_is_read"/>
            <result property="appr_date" column="appr_date"/>
            <result property="emp_code" column="emp_code"/>
            <result property="emp_name" column="emp_name"/>
            <result property="emp_dept_no" column="emp_dept_no"/>
            <result property="dept_name" column="dept_name"/>
            <result property="dept_team_name" column="dept_team_name"/>
            <result property="emp_posi_no" column="emp_posi_no"/>
            <result property="posi_name" column="posi_name"/>
            <result property="emp_role" column="emp_role"/>
        </collection>

        <!-- 참조자 목록 (ReferenceDTO) 매핑 -->
        <collection property="referenceInfo" ofType="com.ss.paperless.report.ReferenceDTO">
            <id property="refe_no" column="refe_no"/>
            <result property="refe_repo_no" column="refe_repo_no"/>
            <result property="refe_emp_no" column="refe_emp_no"/>
            <result property="refe_dept_no" column="refe_dept_no"/>
            <result property="refe_is_read" column="refe_is_read"/>
            <result property="refe_date" column="refe_date"/>
            <result property="emp_code" column="emp_code"/>
            <result property="emp_name" column="emp_name"/>
            <result property="emp_dept_no" column="emp_dept_no"/>
            <result property="dept_name" column="dept_name"/>
            <result property="dept_team_name" column="dept_team_name"/>
            <result property="emp_posi_no" column="emp_posi_no"/>
            <result property="posi_name" column="posi_name"/>
            <result property="emp_role" column="emp_role"/>
        </collection>

        <!-- 수신자 목록 (RecipientDTO) 매핑 -->
        <collection property="recipientInfo" ofType="com.ss.paperless.report.RecipientDTO">
            <id property="reci_no" column="reci_no"/>
            <result property="reci_repo_no" column="reci_repo_no"/>
            <result property="reci_emp_no" column="reci_emp_no"/>
            <result property="reci_dept_no" column="reci_dept_no"/>
            <result property="reci_is_read" column="reci_is_read"/>
            <result property="reci_date" column="reci_date"/>
            <result property="emp_code" column="emp_code"/>
            <result property="emp_name" column="emp_name"/>
            <result property="emp_dept_no" column="emp_dept_no"/>
            <result property="dept_name" column="dept_name"/>
            <result property="dept_team_name" column="dept_team_name"/>
            <result property="emp_posi_no" column="emp_posi_no"/>
            <result property="posi_name" column="posi_name"/>
            <result property="emp_role" column="emp_role"/>
        </collection>
    </resultMap>

    <select id="findByEmpCode" parameterType="String" resultType="com.ss.paperless.employee.EmployeeDTO">
        select e.emp_no, e.emp_code, e.emp_name, e.emp_comp_no, e.emp_dept_no, d.dept_name, d.dept_team_name, e.emp_posi_no, p.posi_name
        from employee e
        left join department d on d.dept_no = e.emp_dept_no
        left join position p on p.posi_no = e.emp_posi_no
        where emp_code = #{empCode}
    </select>

    <!-- Report 테이블에 저장 데이터를 삽입하는 SQL (문서번호 추가) -->
    <insert id="AddReportData" parameterType="map" useGeneratedKeys="true" keyProperty="repo_no">
        INSERT INTO `Report` (repo_emp_no, repo_title, repo_content, repo_status, repo_type, repo_date)
        VALUES (#{repoEmpNo}, #{reportTitle}, #{reportContent}, #{repo_status},'work', #{reportDate})
    </insert>

    <!-- WorkReport 테이블에 임시 저장 데이터를 삽입하는 SQL -->
    <insert id="AddWorkReportData" parameterType="map">
        INSERT INTO `WorkReport` (work_repo_no, repo_start_time, repo_end_time)
        VALUES (#{repo_no}, #{repoStartTime}, #{repoEndTime})
    </insert>

    <!-- Approver 테이블 -->
    <insert id="insertApprover" parameterType="map">
        INSERT INTO Approver (appr_repo_no, appr_emp_no, appr_order, appr_status, appr_delegate, appr_is_read)
        VALUES (#{appr_repo_no}, #{appr_emp_no}, #{appr_order}, #{appr_status}, 0, 0)
    </insert>

    <!-- Reference 테이블 -->
    <insert id="insertReference" parameterType="map">
        INSERT INTO Reference (refe_repo_no, refe_emp_no, refe_dept_no, refe_is_read)
        VALUES (#{refe_repo_no}, #{refe_emp_no}, #{refe_dept_no}, 0)
    </insert>

    <!-- Recipient 테이블 -->
    <insert id="insertRecipient" parameterType="map">
        INSERT INTO Recipient (reci_repo_no, reci_emp_no, reci_dept_no, reci_is_read)
        VALUES (#{reci_repo_no}, #{reci_emp_no}, #{reci_dept_no}, 0)
    </insert>

    <!-- 파일 저장 -->
    <insert id="insertAttachment" parameterType="com.ss.paperless.attachment.Attachment">
        INSERT INTO Attachment (atta_key, atta_url, atta_original_name, atta_size)
        VALUES (#{attaKey}, #{attaUrl}, #{attaOriginalName}, #{attaSize})
    </insert>

    <!-- ReportAttachment - 파일 저장 -->
    <insert id="insertReportAttachment">
        INSERT INTO ReportAttachment (repo_no, atta_no) VALUES (#{repoNo}, #{attaNo})
    </insert>

    <select id="getApproversByReportId" resultType="com.ss.paperless.report.ApproverDTO" parameterType="long">
        SELECT * FROM Approver WHERE appr_repo_no = #{reportId} ORDER BY appr_order
    </select>

    <update id="updateApproverStatus" parameterType="map">
        UPDATE Approver SET appr_status = #{appr_status},
                            appr_date = case when #{appr_status} in ('approved','rejected')
                                        then now()
                                        end
                        WHERE appr_repo_no = #{reportId}
                          AND appr_emp_no = #{empNo}
    </update>

    <!-- Approver 테이블에 결재자 데이터를 삽입하는 SQL -->
    <insert id="AddApproversData" parameterType="map">
        INSERT INTO `Approver` (appr_repo_no, appr_emp_no, appr_dept_no, appr_order, appr_delegate, appr_status)
        VALUES
        (#{reportId}, #{emp_no}, #{emp_dept_no}, #{appr_order}, #{appr_delegate}, #{appr_status})
    </insert>

    <!-- Reference 테이블에 참조자 데이터를 삽입하는 SQL -->
    <insert id="AddReferencesData" parameterType="map">
    INSERT INTO `Reference` (refe_repo_no, refe_emp_no, refe_dept_no)
    VALUES
    <foreach item="reference" collection="references" separator=",">
        (
        #{reportId},
        <choose>
            <when test="reference.emp_no != null">
                #{reference.emp_no, jdbcType=BIGINT}
            </when>
            <otherwise>NULL</otherwise>
        </choose>,
        <choose>
            <when test="reference.deptCode != null">
                #{reference.deptCode, jdbcType=BIGINT}
            </when>
            <otherwise>NULL</otherwise>
        </choose>
        )
    </foreach>
</insert>


    <!-- Recipient 테이블에 수신자 데이터를 삽입하는 SQL -->
    <insert id="AddReceiversData" parameterType="map">
        INSERT INTO `Recipient` (reci_repo_no, reci_emp_no, reci_dept_no)
        VALUES
        <foreach item="recipient" collection="receivers" separator=",">
            (
            #{reportId},
            <choose>
                <when test="recipient.emp_no != null">
                    #{recipient.emp_no, jdbcType=BIGINT}
                </when>
                <otherwise>NULL</otherwise>
            </choose>,
            <choose>
                <when test="recipient.deptCode != null">
                    #{recipient.deptCode, jdbcType=BIGINT}
                </when>
                <otherwise>NULL</otherwise>
            </choose>
            )
        </foreach>
    </insert>

    <!-- Attachment 테이블에 첨부파일 데이터를 삽입하는 SQL -->
    <insert id="AddAttachmentData" parameterType="map" useGeneratedKeys="true" keyProperty="atta_no">
        INSERT INTO `Attachment` (atta_key, atta_url, atta_original_name, atta_size)
        VALUES (#{atta_key}, #{atta_url}, #{atta_original_name}, #{atta_size})
    </insert>

    <!-- ReportAttachment 테이블에 보고서와 첨부파일 관계를 삽입하는 SQL -->
    <insert id="AddReportAttachmentData" parameterType="map">
        INSERT INTO `ReportAttachment` (repo_no, atta_no)
        VALUES (#{repo_no}, #{atta_no})
    </insert>

    <!-- 결재 상신 시 결재자 상태를 업데이트하는 SQL -->
    <update id="UpdateApproverStatusForSubmission" parameterType="long">
        UPDATE `Approver`
        SET appr_status = 'pending'
        WHERE appr_repo_no = #{repo_no}
    </update>

    <!-- 결재 테이블에서 해당 보고서 결재자 수 -->
    <select id="getSelectApproverCount" parameterType="long" resultType="int">
        select count(*) from approver where appr_repo_no = #{reportId}
    </select>

    <select id="getSelectApproverInfo" parameterType="long" resultType="com.ss.paperless.report.ApproverDTO">
        select * from approver
        where appr_repo_no = #{reportId}
        order by appr_order
    </select>





    <!-- 상신 취소 시 결재자 상태 초기화하는 SQL -->
    <update id="ResetApproverStatus" parameterType="long">
        UPDATE `Approver`
        SET appr_status = 'pending'
        WHERE appr_repo_no = #{repo_no}
    </update>

    <!-- 회수 시 결재자 상태를 중단하는 SQL -->
    <update id="HaltApproverStatus" parameterType="long">
        UPDATE `Approver`
        SET appr_status = 'halted'
        WHERE appr_repo_no = #{repo_no}
    </update>

    <update id="updateReportStatus" parameterType="map">
        UPDATE report
        SET
        repo_status = #{status},
        cancel_comment = #{rejectionReason}
        <if test="status == 'submitted'">
            , submission_date = NOW()
        </if>
        <if test="status == 'rejected'">
            , cancel_date = NOW()
        </if>
        WHERE repo_no = #{reportId}
    </update>

    <!-- repo_type 조회 쿼리 -->
    <select id="getReportTypeById" parameterType="long" resultType="string">
        SELECT repo_type FROM Report WHERE repo_no = #{reportId}
    </select>

    <!-- 보고서 전체 목록(부서별) -->
    <select id="selectWorkReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT DISTINCT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 LEFT JOIN WorkReport wr ON r.repo_no = wr.work_repo_no
                 LEFT JOIN Approver a ON r.repo_no = a.appr_repo_no
                 LEFT JOIN Recipient re ON r.repo_no = re.reci_repo_no
                 LEFT JOIN Reference ref ON r.repo_no = ref.refe_repo_no
                 LEFT JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE (a.appr_dept_no = #{deptNo}
           OR re.reci_dept_no = #{deptNo}
           OR ref.refe_dept_no = #{deptNo})
          AND r.repo_status not in ('saved','canceled')


    </select>

    <select id="selectAttenReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT DISTINCT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 LEFT JOIN Approver a ON r.repo_no = a.appr_repo_no
                 LEFT JOIN Recipient re ON r.repo_no = re.reci_repo_no
                 LEFT JOIN Reference ref ON r.repo_no = ref.refe_repo_no
                 LEFT JOIN AttendanceReport ar ON r.repo_no = ar.atten_repo_no
                 LEFT JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE (a.appr_dept_no = #{deptNo}
           OR re.reci_dept_no = #{deptNo}
           OR ref.refe_dept_no = #{deptNo})
          AND r.repo_status not in ('saved','canceled')
    </select>

    <select id="selectPurcReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT DISTINCT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 LEFT JOIN Approver a ON r.repo_no = a.appr_repo_no
                 LEFT JOIN Recipient re ON r.repo_no = re.reci_repo_no
                 LEFT JOIN Reference ref ON r.repo_no = ref.refe_repo_no
                 LEFT JOIN PurchaseReport pr ON r.repo_no = pr.purch_repo_no
                 LEFT JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE (a.appr_dept_no = #{deptNo}
           OR re.reci_dept_no = #{deptNo}
           OR ref.refe_dept_no = #{deptNo})
          AND r.repo_status not in ('saved','canceled')
    </select>

    <!-- 임시 저장함-->
    <select id="selectDraftAsSaveWorkReports" parameterType="map" resultType="ReportDTO">
        SELECT *
        FROM Report r
                 JOIN WorkReport w ON r.repo_no = w.work_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE repo_emp_no = #{empNo}
          AND repo_status = 'saved'
    </select>

    <select id="selectDraftAsSaveAttenReports" parameterType="map" resultType="ReportDTO">
        SELECT *
        FROM Report r
                 JOIN AttendanceReport a ON r.repo_no = a.atten_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE repo_emp_no = #{empNo}
          AND repo_status = 'saved'
    </select>

    <select id="selectDraftAsSavePurcReports" parameterType="map" resultType="ReportDTO">
        SELECT *
        FROM Report r
                 JOIN PurchaseReport p ON r.repo_no = p.purch_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE repo_emp_no = #{empNo}
          AND repo_status = 'saved'
    </select>

    <!-- 결재 대기함 -->
    <select id="selectPendingDocWorkReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT DISTINCT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 LEFT JOIN Approver a ON r.repo_no = a.appr_repo_no
                 LEFT JOIN WorkReport wr ON r.repo_no = wr.work_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE a.appr_emp_no = #{empNo}
          AND a.appr_status = 'pending'
          AND r.repo_status not in ('saved','canceled')

    </select>

    <select id="selectPendingDocAttenReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT DISTINCT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 LEFT JOIN Approver a ON r.repo_no = a.appr_repo_no
                 LEFT JOIN AttendanceReport ar ON r.repo_no = ar.atten_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE a.appr_emp_no = #{empNo}
          AND a.appr_status = 'pending'
          AND r.repo_status not in ('saved','canceled')
    </select>

    <select id="selectPendingDocPurcReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT DISTINCT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 LEFT JOIN Approver a ON r.repo_no = a.appr_repo_no
                 LEFT JOIN PurchaseReport pr ON r.repo_no = pr.purch_repo_no
                 JOIN Employee e ON r.repo_emp_no = e.emp_no
        WHERE a.appr_emp_no = #{empNo}
          AND a.appr_status = 'pending'
          AND r.repo_status not in ('saved','canceled')
    </select>

    <!-- 내 문서함 -->
    <select id="selectMyDocWorkReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 INNER JOIN WorkReport wr ON r.repo_no = wr.work_repo_no
                 INNER join employee e on e.emp_no = r.repo_emp_no
        WHERE r.repo_emp_no = #{empNo}
    </select>

    <select id="selectMyDocAttenReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 INNER JOIN AttendanceReport ar ON r.repo_no = ar.atten_repo_no
                 INNER join employee e on e.emp_no = r.repo_emp_no
        WHERE r.repo_emp_no = #{empNo}
    </select>

    <select id="selectMyDocPurcReports" parameterType="java.lang.Long" resultType="ReportDTO">
        SELECT r.*, e.emp_name, e.emp_dept_no, e.emp_posi_no
        FROM Report r
                 INNER JOIN PurchaseReport pr ON r.repo_no = pr.purch_repo_no
                 INNER join employee e on e.emp_no = r.repo_emp_no
        WHERE r.repo_emp_no = #{empNo}
    </select>

    <!-- 보고서 상세 페이지 데이터 조회 쿼리 -->
    <select id="selectReportById" resultMap="ReportResultMap" parameterType="Long">
        SELECT * FROM report r
                          left join workreport wr on r.repo_no = wr.work_repo_no
                          left join approver a on a.appr_repo_no = r.repo_no
                          left join recipient re on re.reci_repo_no = r.repo_no
                          left join reference rf on rf.refe_repo_no = r.repo_no
                          left join employee e on e.emp_no = r.repo_emp_no
        WHERE repo_no = #{reportId}
    </select>

    <!-- form으로 넘기는 데이터-->
    <select id="selectReportFormById" resultMap="ReportResultMap" parameterType="Long">
        SELECT * FROM report r
                          left join workreport wr on r.repo_no = wr.work_repo_no
                          left join employee e on e.emp_no = r.repo_emp_no
                          inner join department d on d.dept_no = e.emp_dept_no
        WHERE repo_status = 'saved' AND repo_no = #{reportId}
    </select>

    <!-- 보고서 내에 결재자 정보 조회 -->
    <select id="selectReportApprsInfoById" resultType="com.ss.paperless.report.ApproverDTO" parameterType="Long">
        SELECT
            a.appr_no,
            a.appr_repo_no,
            a.appr_emp_no,
            a.appr_order,
            a.appr_status,
            a.appr_delegate,
            a.appr_is_read,
            a.appr_date,
            e.emp_code,
            e.emp_name,
            e.emp_dept_no,
            d.dept_name,
            d.dept_team_name,
            e.emp_posi_no,
            p.posi_name,
            e.emp_role
        FROM
            approver a
                LEFT JOIN
            employee e
            ON
                e.emp_no = a.appr_emp_no
                LEFT JOIN
            department d
            ON
                d.dept_no = e.emp_dept_no
                LEFT JOIN
            position p
            ON
                p.posi_no = e.emp_posi_no
        WHERE
            a.appr_repo_no = #{reportId}
    </select>

    <!-- 수신자  -->
    <select id="selectReportRecisInfoById" resultType="com.ss.paperless.report.RecipientDTO" parameterType="Long">
        (
            SELECT
                r.reci_no,
                r.reci_repo_no,
                r.reci_emp_no,
                r.reci_dept_no,
                r.reci_is_read,
                r.reci_date,
                e.emp_no,
                e.emp_code,
                e.emp_name,
                e.emp_dept_no,
                d.dept_name,
                d.dept_team_name,
                e.emp_posi_no,
                p.posi_name,
                e.emp_role
            FROM
                recipient r
                    LEFT JOIN
                employee e ON e.emp_no = r.reci_emp_no
                    LEFT JOIN
                department d ON d.dept_no = e.emp_dept_no
                    LEFT JOIN
                position p ON p.posi_no = e.emp_posi_no
            WHERE
                r.reci_repo_no = #{reportId} AND r.reci_emp_no IS NOT NULL
        )
        UNION ALL
        (
            SELECT
                r.reci_no,
                r.reci_repo_no,
                NULL AS reci_emp_no,
                r.reci_dept_no,
                r.reci_is_read,
                r.reci_date,
                NULL AS emp_no,
                NULL AS emp_code,
                NULL AS emp_name,
                NULL AS emp_dept_no,
                d.dept_name,
                d.dept_team_name,
                NULL AS emp_posi_no,
                NULL AS posi_name,
                NULL AS emp_role
            FROM
                recipient r
                    LEFT JOIN
                department d ON d.dept_no = r.reci_dept_no
            WHERE
                r.reci_repo_no = #{reportId} AND r.reci_emp_no IS NULL
        )
    </select>

    <!-- 참조자 -->
    <select id="selectReportRefesInfoById" resultType="com.ss.paperless.report.ReferenceDTO" parameterType="Long">
        (
            SELECT
                rf.refe_no,
                rf.refe_repo_no,
                rf.refe_emp_no,
                rf.refe_dept_no,
                rf.refe_is_read,
                rf.refe_date,
                e.emp_no,
                e.emp_code,
                e.emp_name,
                e.emp_dept_no,
                d.dept_name,
                d.dept_team_name,
                e.emp_posi_no,
                p.posi_name,
                e.emp_role
            FROM
                reference rf
                    LEFT JOIN
                employee e ON e.emp_no = rf.refe_emp_no
                    LEFT JOIN
                department d ON d.dept_no = e.emp_dept_no
                    LEFT JOIN
                position p ON p.posi_no = e.emp_posi_no
            WHERE
                rf.refe_repo_no = #{reportId} AND rf.refe_emp_no IS NOT NULL
        )
        UNION ALL
        (
            SELECT
                rf.refe_no,
                rf.refe_repo_no,
                NULL AS refe_emp_no,
                rf.refe_dept_no,
                rf.refe_is_read,
                rf.refe_date,
                NULL AS emp_no,
                NULL AS emp_code,
                NULL AS emp_name,
                NULL AS emp_dept_no,
                d.dept_name,
                d.dept_team_name,
                NULL AS emp_posi_no,
                NULL AS posi_name,
                NULL AS emp_role
            FROM
                reference rf
                    LEFT JOIN
                department d ON d.dept_no = rf.refe_dept_no
            WHERE
                rf.refe_repo_no = #{reportId} AND rf.refe_emp_no IS NULL
        )
    </select>

    <update id="updateReportCode" parameterType="map">
        UPDATE report
        SET repo_code = #{repoCode}
        WHERE repo_no = #{reportId};
    </update>
	
</mapper>
